

Se la memoria esterna non funziona:

cd /media/riso/
sudo mkdir TOSHIBA\ EXT
ls
sudo mount -t ntfs-3g /dev/sda1 /media/riso/TOSHIBA\ EXT

Deploiment practice:
https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
https

per il funzionamento di WeasyPrint serve il pacchetto di sistema:
apt install libpangocairo-1.0-0



Comandi utili
Impostazioni nginx e gunicorn:
    sudo nano /etc/nginx/sites-available/documanager
    Su aws linux:
    (sudo nano /etc/nginx/conf.d/documanager.conf)
    sudo nano /etc/systemd/system/gunicorn.service

Riavviare i servizi
    sudo systemctl daemon-reload
    sudo systemctl restart gunicorn
    sudo systemctl restart nginx

File di log di Nginx e Gunicorn
    sudo tail -f /var/log/nginx/error.log
    sudo journalctl -u gunicorn --since "5 minutes ago"
    journalctl -u gunicorn -n 200 > gunicorn.logs
    sudo systemctl status gunicorn

Scopri se gunicorn legge l'environment:
    sudo systemctl show-environment | grep DEBUG
Avvia Gunicorn manualmente sulla porta 8000 (la porta deve essere sbloccata nei gruppi di permessi)
    gunicorn --bind 0.0.0.0:8000 documanager.wsgi:application --reload
Avvia Gunicorn manualmente con le stesse impostazioni (potenzialmente) di systemd
    /var/www/documanager/venv/bin/gunicorn \
    --bind unix:/var/www/documanager/run/gunicorn.sock \
    --chdir /var/www/documanager \
    core.wsgi:application --reload --log-level debug
Triggera manualmente il file socket (dovresti ottenere la risposta in html)
    curl -L --unix-socket /var/www/documanager/run/gunicorn.sock http://localhost/defunti



sudo mkdir -p /run/gunicorn
sudo chown ubuntu:www-data /run/gunicorn

Indirizzi dns per connettersi con ssh:
ssh -i "/home/cristian/.ssh/ArchettiEC2@LenovoG500.pem" ubuntu@ec2-16-171-113-111.eu-north-1.compute.amazonaws.com
ssh -i "/home/riso/.ssh/ArchettiEC2.pem" ubuntu@ec2-13-51-193-252.eu-north-1.compute.amazonaws.com
ssh -i "/home/riso/.ssh/ArchettiEC2.pem" ec2-user@ec2-13-60-228-41.eu-north-1.compute.amazonaws.com
ssh -i "/home/riso/.ssh/ec2us_east_1.pem" ubuntu@ec2-3-238-40-176.compute-1.amazonaws.com
ssh -i "/home/riso/.ssh/aws_eu-north-1@riso_thinkpad.pem" ubuntu@ec2-16-16-93-45.eu-north-1.compute.amazonaws.com



--------------------------------------------------

Processo setup nuovo server:

scambio le chiavi di sicurezza con il provider
scopro il nome utente (ec2-user o ubuntu o altri)
scopro l'indirizzo pubblico DNS del server (ec2-13-53-205-189.eu-north-1.compute.amazonaws.com in questo caso)
entro nel server
    ssh -i "/home/riso/.ssh/ArchettiEC2.pem" ec2-user@ec2-13-53-205-189.eu-north-1.compute.amazonaws.com
aggiorno i pacchetti alle versioni di sviluppo
    sudo yum update
    sudo yum upgrade
(ad esempio qui aggiorno varie cose. credits https://tecadmin.net/how-to-install-python-3-12-on-amazon-linux/ 
e https://stackoverflow.com/questions/1210664/no-module-named-sqlite3 e 
https://www.giannifavilli.it/blog/python-django-su-webserver-nginx-e-gunicorn/ 
        Utilizzare privilegi di root o sudo.

        apt install python3 python3-pip python3-venv python3-dev
        apt install nginx supervisor
        apt install sqlite3
        Opzionali

        apt install curl git nano build-essential - Tool Sviluppo
        apt install python3-certbot-nginx - Certbot
        apt install libpq-dev postgresql postgresql-contrib - PostgreSQL)
Qui installo python
    sudo yum groupinstall "Development Tools" -y
    sudo yum install gcc openssl-devel bzip2-devel libffi-devel -y
    sudo yum install sqlite-devel -y
    cd /usr/src
    sudo wget https://www.python.org/ftp/python/3.12.2/Python-3.12.2.tgz
    sudo tar xzf Python-3.12.2.tgz
    cd Python-3.12.2
    sudo ./configure --enable-optimizations --enable-loadable-sqlite-extensions
    sudo make
    sudo make altinstall
    python3.12 --version
(qui installo pip)
    sudo curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    sudo python3.12 get-pip.py
    pip3.12 --version
(qui installo virtualenv)
    pip install virtualenv
(qui installo nginx e supervisor)
    sudo yum install nginx
(qui installo git)
    sudo yum install git
Creo la cartella del progetto
    sudo mkdir -p /var/www/documanager
Setto la proprietà in modo che sia accessibile da gunicorn e nginx, ma prima controllo qual è il gruppo di
nginx osservando quali di questi due comandi ha un output:
    getent group nginx
    getent group www-data
Procedo con modificare la proprietà e i diritti (vedi https://www.giannifavilli.it/blog/python-django-su-webserver-nginx-e-gunicorn/):
    # chown www-data:users /var/www/django-webapp
    # chmod g+w /var/www/django-webapp
    sudo chown -R ec2-user:nginx /var/www/documanager
    sudo chmod 2775 /var/www/documanager
Aggiungi il tuo utente al gruppo nginx
    sudo usermod -a -G nginx ec2-user
creo una nuova coppia di chiavi e scambio la chiave pubblica con github
    cd ~/.ssh/
    ssh-keygen -t ed25519 -C "eraclesax@github.com"
Adding your SSH key to the ssh-agent
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_ed25519
(se serve cambio i permessi di accesso e apertura della chiave e della cartella ssh)
    chmod ...
copio la chiave pubblica in github
    nano ~/.ssh/id_ed25519.pub
    -> copio la chiave in github
clono la repository
    cd ~/
    git clone git@github.com:eraclesax/documanager.git
creo un virtualenv
    cd documanager/
    sudo yum install python3 pip
    pip install virtualenv
    python3 -m virtualenv venv
installo i pacchetti dei requirements
    source venv/bin/activate
    pip install --upgrade pip
    pip install -r requirements.txt
creo un file .env
    touch .env
    nano .env
dentro ci metto
ALLOWED_HOST=3.238.40.176
DJANGO_SECRET_KEY=6@&(ti2fkhl&g0$ar)&wv=04+@6-lo8%l17@a(-0s4s&rf4oci
DEBUG=False
DEBUG_EMAIL=False
STATIC_ROOT=/var/www/documanager/static
L'host è quello pubblico dichiarato dal provider
L'ultima opzione serve per Nginx, è la cartella dove andrà a prendersi i file statici

creo il database e sposto i file statici
    python manage.py migrate
    python manage.py collectstatic

Installo Gunicorn (nel venv)
    pip install gunicorn
Ne testo il funzionamento
    gunicorn --bind 0.0.0.0:8000 core.wsgi:application
(se vedi la tua app su <EC2_PUBLIC_IP>:8000, funziona ✅),


Crea un service systemd per avvio automatico:
    sudo nano /etc/systemd/system/gunicorn.service
contenuto:
    [Unit]
    Description=Gunicorn daemon for Django project
    After=network.target

    [Service]
    User=ubuntu
    Group=www-data
    WorkingDirectory=/var/www/documanager/documanager
    ExecStart=/var/www/documanager/documanager/venv/bin/gunicorn \
        --workers 3 \
        --bind unix:/run/gunicorn/documanager.sock \
        core.wsgi:application

    [Install]
    WantedBy=multi-user.target
Una versione modificata che esplicita una variabile d'ambiente e l'indirizzo del file .env
    [Unit]
    Description=Gunicorn daemon for Django project
    After=network.target

    [Service]
    User=ec2-user
    Group=nginx
    WorkingDirectory=/home/ec2-user/documanager
    ExecStart=/home/ec2-user/documanager/venv/bin/gunicorn \
            --workers 3 \
            --bind unix:/run/gunicorn/documanager.sock \
            core.wsgi:application
    Environment="DJANGO_SETTINGS_MODULE=core.settings"
    EnvironmentFile=/home/ec2-user/documanager/.env

    [Install]
    WantedBy=multi-user.target

Creo la cartella in cui andrò a mettere il socket. Deve essere accessibile di nginx:
    sudo mkdir -p /var/www/run/gunicorn
    sudo chown ubuntu:www-data /var/www/run/gunicorn
Poi:
    sudo systemctl start gunicorn
    sudo systemctl enable gunicorn
    sudo systemctl status gunicorn

Configuro Nginx:
Creo la cartella per i file statici (ma dovrebbe già essere stata creata)
    sudo mkdir -p /var/www/documanager/static
Imposta la directory statica con gid e permessi di gruppo corretti:
(a volte l'utente nginx è www-data)
    sudo chown -R ubuntu:www-data /var/www/documanager/static
    sudo chmod 2775 /var/www/documanager/static
Aggiungi il tuo utente al gruppo di nginx
    sudo usermod -a -G www-data ubuntu
Controlla i permessi:
    ls -ld /var/www/documanager/static
Dovresti vedere qualcosa tipo:
    drwxr-sr-x 2 deployuser www-data 4096 ago 21 15:00 static
Creo il file di configurazione (ATTENTO! Se la cartella sites-available non esiste
è probabile che nginx usi una convenzione diversa per i file di configurazione).
Convenzione di ubuntu:
    sudo nano /etc/nginx/sites-available/documanager
Convenzione amazon linux:
    sudo nano /etc/nginx/conf.d/documanager.conf
contenuto per Ubuntu:
server {
    listen 80;
    server_name 3.238.40.176;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        alias /var/www/documanager/static/;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn/documanager.sock;
    }
}
contenuto per Amazon Linux (vedi chat con ChatGPT5, è stato difficilissimo, sono stato 3 giorni):
upstream documanager {
    server unix:/var/www/documanager/run/gunicorn.sock fail_timeout=0;
}

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name 13.60.228.41 localhost _;

    client_max_body_size 32M;

    access_log /var/www/documanager/logs/nginx_access.log;
    error_log /var/www/documanager/logs/nginx_error.log warn;

    location = /favicon.ico {
        alias /var/www/documanager/assets/favicon.ico;
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        alias /var/www/documanager/assets/robots.txt;
    }

    location /static/ {
        alias /var/www/documanager/static/;
    }

    location /assets/ {
        alias /var/www/documanager/assets/;
    }

    location / {
        proxy_pass http://documanager;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

creo la cartella static e la cartella logs

Attiva la config:
    sudo ln -s /etc/nginx/sites-available/documanager /etc/nginx/sites-enabled
    sudo nginx -t
    sudo systemctl start nginx
Vai su http://3.238.40.176 → dovrebbe comparire la tua app Django 🎉






    

--------------------------------------------------

Processo setup nuovo server:

scambio le chiavi di sicurezza con il provider
scopro il nome utente (ec2-user o ubuntu o altri)
scopro l'indirizzo pubblico DNS del server (ec2-13-53-205-189.eu-north-1.compute.amazonaws.com in questo caso)
entro nel server
    ssh -i "/home/riso/.ssh/ArchettiEC2.pem" ec2-user@ec2-13-53-205-189.eu-north-1.compute.amazonaws.com
aggiorno i pacchetti alle versioni di sviluppo
    sudo yum update
    sudo yum upgrade
(ad esempio qui aggiorno varie cose. credits https://tecadmin.net/how-to-install-python-3-12-on-amazon-linux/ 
e https://stackoverflow.com/questions/1210664/no-module-named-sqlite3 e 
https://www.giannifavilli.it/blog/python-django-su-webserver-nginx-e-gunicorn/ 
        Utilizzare privilegi di root o sudo.

        apt install python3 python3-pip python3-venv python3-dev
        apt install nginx supervisor
        apt install sqlite3
        Opzionali

        apt install curl git nano build-essential - Tool Sviluppo
        apt install python3-certbot-nginx - Certbot
        apt install libpq-dev postgresql postgresql-contrib - PostgreSQL)
Qui installo python
    sudo yum groupinstall "Development Tools" -y
    sudo yum install gcc openssl-devel bzip2-devel libffi-devel -y
    sudo yum install sqlite-devel -y
    cd /usr/src
    sudo wget https://www.python.org/ftp/python/3.12.2/Python-3.12.2.tgz
    sudo tar xzf Python-3.12.2.tgz
    cd Python-3.12.2
    sudo ./configure --enable-optimizations --enable-loadable-sqlite-extensions
    sudo make
    sudo make altinstall
    python3.12 --version
(qui installo pip)
    sudo curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    sudo python3.12 get-pip.py
    pip3.12 --version
(qui installo nginx)
    sudo yum install nginx
(qui installo git)
    sudo yum install git
creo una nuova coppia di chiavi e scambio la chiave pubblica con github
    cd ~/.ssh/
    ssh-keygen -t ed25519 -C "eraclesax@github.com"
Adding your SSH key to the ssh-agent
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_ed25519
(se serve cambio i permessi di accesso e apertura della chiave e della cartella ssh)
    chmod ...
copio la chiave pubblica in github
    nano ~/.ssh/id_ed25519.pub
    -> copio la chiave in github
clono la repository
    cd ~/
    git clone git@github.com:eraclesax/documanager.git
creo un virtualenv
    cd documanager/
    sudo yum install python3 pip
    pip install virtualenv
    python3 -m virtualenv venv
installo i pacchetti dei requirements
    source venv/bin/activate
    pip install --upgrade pip
    pip install -r requirements.txt
creo un file .env
    touch .env
    nano .env
dentro ci metto
    ALLOWED_HOST=13.53.205.189 
    DEBUG=False
    STATIC_ROOT=/var/www/documanager/static
L'host è quello pubblico dichiarato dal provider
L'ultima opzione serve per Nginx, è la cartella dove andrà a prendersi i file statici

test fin qui: lancia
    python manage.py runserver 0.0.0.0:8000
    e vedi su 
    http://13.53.205.189:8000
    se ti esce l'app. Se non ti esce assicurati che il security group di Amazon AWS abbia la porta 
    8000 aperta.
    Se continua  a non andare:
    Se stai usando Linux, controlla ufw (che è il firewall) o iptables. Ad esempio:
    sudo ufw status
    Se è attivo, apri la porta 8000:
    sudo ufw allow 8000/tcp

Installo Gunicorn (nel venv)
    pip install gunicorn
Ne testo il funzionamento
    gunicorn --bind 0.0.0.0:8000 mysite_core.wsgi:application
(se vedi la tua app su <EC2_PUBLIC_IP>:8000, funziona ✅)
Crea un service systemd per avvio automatico:
    sudo nano /etc/systemd/system/gunicorn.service
contenuto:
    [Unit]
    Description=Gunicorn daemon for Django project
    After=network.target

    [Service]
    User=ec2-user
    Group=nginx
    WorkingDirectory=/home/ec2-user/documanager
    ExecStart=/home/ec2-user/documanager/venv/bin/gunicorn --workers 3 --bind unix:/run/gunicorn/documanager.sock core.wsgi:application

    [Install]
    WantedBy=multi-user.target
Una versione modificata che esplicita una variabile d'ambiente e l'indirizzo del file .env
[Unit]
Description=Gunicorn daemon for Django project
After=network.target

[Service]
User=ec2-user o www-data in ubuntu o ubuntu (meglio www-data)
Group=nginx o www-data in ubuntu
UMask=0002
WorkingDirectory=/home/ec2-user/documanager
ExecStart=/home/ec2-user/documanager/venv/bin/gunicorn \
        --workers 3 \
        --bind unix:/run/gunicorn/documanager.sock \
        core.wsgi:application
Environment="DJANGO_SETTINGS_MODULE=core.settings"
EnvironmentFile=/home/ec2-user/documanager/.env

RuntimeDirectory=gunicorn
RuntimeDirectoryMode=0755

[Install]
WantedBy=multi-user.target

Creo la cartella in cui andrò a mettere il socket. Deve essere accessibile di nginx:
    sudo mkdir -p /run/gunicorn
    sudo chown ec2-user:nginx /run/gunicorn
Poi:
    sudo systemctl start gunicorn
    sudo systemctl enable gunicorn

Configuro Nginx:
Creo la cartella per i file statici
    sudo mkdir /var/www
    sudo mkdir /var/www/documanager
    sudo mkdir /var/www/documanager/static
Imposta la directory statica con gid e permessi di gruppo corretti:
(a volte l'utente nginx è www-data)
    sudo chown -R ec2-user:nginx /var/www/documanager/static
    sudo chmod 2775 /var/www/documanager/static
Aggiungi il tuo utente al gruppo nginx
    sudo usermod -a -G nginx ec2-user
Controlla i permessi:
    ls -ld /var/www/documanager/static
Dovresti vedere qualcosa tipo:
    drwxr-sr-x 2 deployuser www-data 4096 ago 21 15:00 static
Creo il file di configurazione:
    sudo mkdir /etc/nginx/sites-available
    sudo nano /etc/nginx/sites-available/documanager
contenuto:
    server {
        listen 80;
        server_name 13.53.205.189;

        location = /favicon.ico { access_log off; log_not_found off; }
        location /static/ {
            root /var/www/documanager/static/;
        }

        location / {
            include proxy_params;
            proxy_pass http://unix:/run/gunicorn/documanager/documanager.sock;
        }

        location /media/ {
                alias /var/www/documanager/media/;
        }
        
        location ~ /\. {
            deny all;
        }


    }

    (nota, la cartella media deve essere MEDIA_ROOT di django)
    ( controlla se nginx ha accesso alla cartella static e a media
        sudo mkdir -p /var/www/documanager/media
        sudo mv /home/ubuntu/documanager/media/* /var/www/documanager/media/
        sudo chown -R www-data:www-data /var/www/documanager/media
        sudo chmod -R 775 /var/www/documanager/media
    )
Attiva la config:
    sudo ln -s /etc/nginx/sites-available/documanager /etc/nginx/sites-enabled
    sudo nginx -t
    sudo systemctl restart nginx
Vai su http://13.53.205.189 → dovrebbe comparire la tua app Django 🎉

creo il database e sposto i file statici
    python manage.py migrate
    python manage.py collectstatic


--------------------------------------------------------------------

Installazione certificato

Installa certbot
    sudo apt update
    sudo apt install certbot python3-certbot-nginx -y
Richiedi il certificato
    sudo certbot --nginx -d archetti.click -d www.archetti.click

-------------------------------------------------------------------

Definire un nuovo tag:

# Assicurati di essere aggiornato
git checkout development
git pull origin development

# Vai su master e aggiornalo
git checkout master
git pull origin master

# Fai il merge dello sviluppo su master
git merge --no-ff development -m "Merge branch 'development' into 'master' for release 1.0.0"

git tag -a v1.0.0 -m "Release version 1.0.0"
git push origin v1.0.0

3. Continuare lo sviluppo

Sul branch development continuerai a sviluppare nuove feature.
Sul branch master avrai solo le versioni stabili rilasciate.
Puoi anche creare un branch release/x.y.z se vuoi congelare il codice mentre testi/fissi bug prima di rilasciarlo.

4. Consiglio: Semantic Versioning

Seguire Semantic Versioning (SemVer)
 ti aiuta a dare un senso ai numeri di versione:
MAJOR: cambiamenti incompatibili (1.x.x → 2.0.0).
MINOR: nuove feature compatibili (1.0.0 → 1.1.0).
PATCH: fix retrocompatibili (1.0.0 → 1.0.1).

-------------------------------------------------------------------------


Rimuovere file temporanei seguiti da git

rm -rf docdefunto/__pycache__/
echo "__pycache__/" >> .gitignore
git rm -r --cached docdefunto/__pycache__/





## DATABASE SETTING UP
sudo -u postgres psql

CREATE DATABASE myproject;
CREATE USER myprojectuser WITH PASSWORD 'password';
ALTER ROLE eifuprod_dbuser SET client_encoding TO 'utf8';
ALTER ROLE eifuprod_dbuser SET default_transaction_isolation TO 'read committed';
ALTER ROLE eifuprod_dbuser SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE eifuprod_db TO eifuprod_dbuser;
\c eifuprod_db postgres
GRANT ALL ON SCHEMA public TO eifuprod_dbuser;



## LOGS PER DEBUG DETTAGLIATI ##

Sto avendo problemi ma non riesco a fare debug perché non so dove leggere gli errori. C'è un modo per avere logs più dettagliati da nginx, gunicorn e dal server django in produzione?
ChatGPT said:

Sì, assolutamente 👍
In produzione di solito i log sono molto “scarsi” perché pensati solo per non intasare il disco. Ma puoi renderli molto più verbosi sia per nginx, gunicorn che per Django.

🔹 Nginx

I log stanno quasi sempre in:

/var/log/nginx/access.log
/var/log/nginx/error.log


Puoi aumentare il livello di dettaglio cambiando in /etc/nginx/nginx.conf (o nel file del tuo sito in /etc/nginx/sites-enabled/...):

error_log /var/log/nginx/error.log notice;


→ cambia notice in info o debug:

error_log /var/log/nginx/error.log debug;


⚠️ Con debug i log diventano enormi, quindi usalo solo temporaneamente.

Poi fai reload:

sudo nginx -s reload

🔹 Gunicorn

Se usi systemd, apri la tua unit (/etc/systemd/system/gunicorn.service) e aggiungi ad esempio:

ExecStart=/home/ubuntu/documanager/venv/bin/gunicorn \
  --workers 3 \
  --bind unix:/run/gunicorn.sock \
  --log-level debug \
  --access-logfile /var/log/gunicorn/access.log \
  --error-logfile /var/log/gunicorn/error.log \
  core.wsgi:application


Poi:

sudo systemctl daemon-reexec
sudo systemctl restart gunicorn
sudo systemctl restart nginx

Ora avrai log dettagliati in /var/log/gunicorn/.

🔹 Django

In settings.py, puoi configurare il logging.
Per esempio, se vuoi che Django scriva tutto in un file /var/log/django/debug.log:

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/var/log/django/debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


Puoi anche loggare solo certi componenti, tipo database query, middleware, ecc.

👉 Così avresti:

nginx → errori di proxy/static/media

gunicorn → crash dei worker

django → eccezioni Python e query strane


## Metto un file di swap ##
sudo fallocate -l 1G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

## FILE DI CONFIGURAZIONE GUNICORN RIDOTTA RAM ##
ù[Unit]
Description=Gunicorn daemon for Django project
After=network.target

[Service]
User=ubuntu
Group=www-data
UMask=0002
WorkingDirectory=/home/ubuntu/documanager
ExecStart=/home/ubuntu/documanager/venv/bin/gunicorn \
    --workers 1 \
	--threads 2 \
	--timeout 30 \
	--max-requests 100 \
	--max-requests-jitter 10 \
        --bind unix:/run/gunicorn/documanager.sock \
	--log-level debug \
	--access-logfile /var/log/gunicorn/access.log \
	--error-logfile /var/log/gunicorn/error.log \
        core.wsgi:application
Environment="DJANGO_SETTINGS_MODULE=core.settings"
EnvironmentFile=/home/ubuntu/documanager/.env

RuntimeDirectory=gunicorn
RuntimeDirectoryMode=0755

MemoryMax=200M

[Install]
WantedBy=multi-user.target
